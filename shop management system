#include <iostream>
 #include <string>
 using namespace std;
 
class Item {
 protected:
 string name;
 double price;
 public:
 Item(const string &name, double price) : name(name), price(price) {}
 virtual void display() const {
 cout << "Item: " << name << ", Price: $" << price << endl;
 }
 virtual ~Item() {}
 };
 class DiscountItem : public Item {
 private:
 double discount;
 public:
 DiscountItem(const string &name, double price, double discount)
 : Item(name, price), discount(discount) {}
 void display() const override {
 double discountedPrice = price- (price * discount / 100);
 cout << "Discounted Item: " << name << "\n"
 << "Original Price: $" << price << "\n"
 << "Discount: " << discount << "%\n"
 << "Final Price: $" << discountedPrice << endl;
 }
 };
 class Shop {
 private:
 Item** items;
 int capacity;
 int size;
 public:
 Shop() : capacity(10), size(0) {
 items = new Item*[capacity];
 }
void addItem(Item* item) {
 if (size >= capacity) {
 capacity *= 2;
 Item** newItems = new Item*[capacity];
 for (int i = 0; i < size; ++i) {
 newItems[i] = items[i];
 }
 delete[] items;
 items = newItems;
 }
 items[size++] = item;
 }
 void displayItems() const {
 for (int i = 0; i < size; ++i) {
 items[i]->display();
 }
 }
 void cleanUp() {
 for (int i = 0; i < size; ++i) {
 delete items[i];
 }
 delete[] items ;
 }
 };
 int main() {
 Shop shop;
 shop.addItem(new Item("Basic Item", 10.0));
 shop.addItem(new DiscountItem("Discounted Item", 20.0, 15.0));
 shop.displayItems();
 shop.cleanUp();
 return 0;
 }
